/*
 * This Java source file was generated by the Gradle 'init' task.
 *
 * TODO: move some of static functions to other classes
 */
package oop.homework1030;

import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.alibaba.fastjson2.JSONArray;

public class App {
  private static InfoPublisher<ArrayList<StudentInfo>> publisher;
  private static ArrayList<StudentInfo> students;

  private static void init() {
    students = new ArrayList<StudentInfo>();

    try {
      students.addAll(UndergraduateStudent.readFromFile("us.txt"));
    } catch (Exception e) {
      System.err.println("[Error] Read undergraduate students failed!");
    }

    try {
      students.addAll(GraduateStudent.readFromFile("gs.json"));
    } catch (Exception e) {
      System.err.println("[Error] Read graduate students failed!");
    }

    try {
      students.addAll(DoctoralStudent.readFromFile("ds.xml"));
    } catch (Exception e) {
      System.err.println("[Error] Read doctoral students failed!");
    }


    publisher = new InfoPublisher<ArrayList<StudentInfo>>();

    publisher.subscribe("us", (list) -> {
      List<UndergraduateStudent> undergraduateStudents = list.stream()
        .filter(student -> student instanceof UndergraduateStudent)
        .map(student -> (UndergraduateStudent) student)
        .toList();

      try {
        FileWriter out = new FileWriter("us.txt");
        undergraduateStudents.forEach(student -> {
          try {
            out.write(student.toString() + "\n");
          } catch (Exception e) {
            System.err.println("[Error] Error occured when writing undergraduate student info!");
          }
        });
        out.close();
      } catch (Exception e) {
        System.err.println("[Error] Write undergraduate students failed!");
      }
    });

    publisher.subscribe("gs", (list) -> {
      List<GraduateStudent> graduateStudents = list.stream()
        .filter(student -> student instanceof GraduateStudent)
        .map(student -> (GraduateStudent) student)
        .toList();

      JSONArray res = new JSONArray(graduateStudents);
      try {
        FileWriter out = new FileWriter("gs.json");
        out.write(res.toJSONString());
        out.close();
      } catch (Exception e) {
        System.err.println("[Error] Write graduate students failed!");
      }
    });

    publisher.subscribe("ds", (list) -> {
      Document doc = DocumentHelper.createDocument();

      Element root = doc.addElement("doctoralStudents");

      list.forEach(student -> {
        if (student instanceof DoctoralStudent) {
          root.add(((DoctoralStudent) student).toElement());
        }
      });

      try {
        FileWriter out = new FileWriter("ds.xml");
        doc.write(out);
        out.close();
      } catch (Exception e) {
        System.err.println("[Error] Write doctoral students failed!");
      }
    });
  }

  private static String greeting =
    "[A] 打印全部学生信息\n" +
    "[B] 新增一个本科生\n" +
    "[C] 新增一个研究生\n" +
    "[D] 新增一个博士生\n" +
    "[E] 按学号查找学生\n" +
    "[F] 按姓名查找学生\n" +
    "[G] 学生排序\n" +
    "[Z] 结束程序\n";

  private static String prompt = ">>> ";

  private static void run() {
    System.out.println(greeting);

    Scanner scan = new Scanner(System.in);

    while (true) {
      System.out.print(prompt);
      System.out.flush();

      String input = scan.nextLine();

      switch (input) {
        case "A": {
          printStudents(students);
          break;
        }
        case "B": {
          addUndergraduateStudent(scan);
          break;
        }
        case "C": {
          addGraduateStudent();
          break;
        }
        case "D": {
          addDoctoralStudent();
          break;
        }
        case "E": {
          String id = scan.nextLine();
          findStudentById(id);
          break;
        }
        case "F": {
          String name = scan.nextLine();
          findStudentByName(name);
          break;
        }
        case "G": {
          sortStudents();
          break;
        }
        case "Z": {
          scan.close();
          return;
        }
        default: {
          System.err.println("[Error] Unknown command!");
        }
      }
    }
  }

  private static void printStudents(ArrayList<StudentInfo> students) {
    students.forEach(student -> System.out.println(student));
  }

  private static void addUndergraduateStudent(Scanner scan) {
    try {
      students.add(UndergraduateStudent.readOne(scan));
      publisher.publish("us", students);
    } catch (Exception e) {
      System.err.println("[Error] Invalid undergraduate student info!");
    }
  }

  private static void addGraduateStudent() {
    // TODO: add one graduate student and produce an event
    publisher.publish("gs", students);
    System.err.println("[TODO]");
  }

  private static void addDoctoralStudent() {
    // TODO: add one doctoral student and produce an event
    publisher.publish("ds", students);
    System.err.println("[TODO]");
  }

  private static void findStudentById(String id) {
    students.forEach(student -> {
      if (student.getStudentNumber().equals(id)) {
        System.out.println(student);
      }
    });
  }

  private static void findStudentByName(String name) {
    students.forEach(student -> {
      if (student.getStudentName().equals(name)) {
        System.out.println(student);
      }
    });
  }

  private static void sortStudents() {
    ArrayList<StudentInfo> tempStudents = new ArrayList<StudentInfo>();
    students.forEach(student -> tempStudents.add(student));

    tempStudents.sort((lhs, rhs) -> {
      if (lhs.getClass() == rhs.getClass()) {
        return rhs.getBirthday().compareTo(lhs.getBirthday());
      }

      if (lhs.getClass() == UndergraduateStudent.class) {
        return -1;
      }

      if (lhs.getClass() == DoctoralStudent.class) {
        return 1;
      }

      if (rhs.getClass() == UndergraduateStudent.class) {
        return 1;
      }

      if (rhs.getClass() == DoctoralStudent.class) {
        return -1;
      }

      // unreachable
      return 0;
    });

    printStudents(tempStudents);
  }

  public static void main(String[] args) {
    init();
    run();
  }
}
